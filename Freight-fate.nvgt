// Core includes
#include "speech.nvgt"  // For text-to-speech functionality 
#include "menu.nvgt"    // For menu interfaces
#include "form.nvgt"    // For auditory UI components
#include "sound_pool.nvgt" // For sound management

// Sound management using sound_pool and proper error handling
sound_pool@ game_sounds = sound_pool();
pack sound_pack;

void initialize_audio() {
    try {
        @sound_default_pack = sound_pack;
        if(!sound_pack.open("sounds.dat")) {
            speak("Warning: Could not load sound pack", false);
            return;
        }

        // Initialize sounds with proper error checking
        int menu_music = game_sounds.play_stationary("sounds/menu_music.ogg", true);
        int engine_idle = game_sounds.play_stationary("sounds/engine_idle.ogg", true);
        int ui_click = game_sounds.play_stationary("sounds/ui_click.ogg", false);
        int event = game_sounds.play_stationary("sounds/event.ogg", false);

        if(menu_music >= 0) {
            game_sounds.update_sound_start_values(menu_music, 0, -0.5, 100);
        }
        if(engine_idle >= 0) {
            game_sounds.update_sound_start_values(engine_idle, 0, -0.7, 100); 
        }
        if(ui_click >= 0) {
            game_sounds.update_sound_start_values(ui_click, 0, -0.3, 100);
        }
        if(event >= 0) {
            game_sounds.update_sound_start_values(event, 0, -0.4, 100);
        }
    }
    catch(string e) {
        speak("Error initializing audio: " + e, false);
    }
}

// Sound handles
int menu_music_handle = -1;
int engine_idle_handle = -1;
int ui_click_handle = -1;
int event_handle = -1;

void play_menu_music() {
    if(menu_music_handle >= 0) {
        game_sounds.resume_sound(menu_music_handle);
    }
}

void stop_menu_music() {
    if(menu_music_handle >= 0) {
        game_sounds.pause_sound(menu_music_handle);
    }
}

void play_engine_sound(double speed_mph) {
    if(engine_idle_handle >= 0) {
        if(!game_sounds.sound_is_playing(engine_idle_handle)) {
            game_sounds.resume_sound(engine_idle_handle);
        }
        game_sounds.update_sound_start_values(engine_idle_handle, 0, -0.7, 80 + (speed_mph / 100.0 * 40));
    }
}

void stop_engine_sound() {
    if(engine_idle_handle >= 0) {
        game_sounds.pause_sound(engine_idle_handle);
    }
}

void play_ui_sound() {
    if(ui_click_handle >= 0) {
        // Restart the sound each time for UI feedback
        game_sounds.destroy_sound(ui_click_handle);
        ui_click_handle = game_sounds.play_stationary("sounds/ui_click.ogg", false);
        if(ui_click_handle >= 0) {
            game_sounds.update_sound_start_values(ui_click_handle, 0, -0.3, 100);
        }
    }
}

void play_event_sound() {
    if(event_handle >= 0) {
        // Restart the sound each time for events
        game_sounds.destroy_sound(event_handle);
        event_handle = game_sounds.play_stationary("sounds/event.ogg", false);
        if(event_handle >= 0) {
            game_sounds.update_sound_start_values(event_handle, 0, -0.4, 100);
        }
    }
}


// Math helper functions
double minimum(double a, double b) {
    if(a < b) return a;
    return b;
}

double maximum(double a, double b) {
    if(a > b) return a;
    return b;
}

// Game state structure for better organization
class GameState {
    double distance = 0;
    double fuel = 100;
    double money = 1000;
    bool driving = false;
    uint current_destination = 0;
    uint current_location = 0;
    string current_cargo = "";
    double cargo_value = 0;
    bool game_over = false;
    bool player_won = false;
    bool game_won = false;
    
    void reset() {
        distance = 0;
        fuel = 100;
        money = 1000;
        driving = false;
        current_destination = 0;
        current_location = 0;
        current_cargo = "";
        cargo_value = 0;
        game_over = false;
        player_won = false;
    }
}


GameState game_state;
array<double> destinations;
array<string> locations;
array<double> fuel_prices;

bool check_exit_keys() {
    if (key_pressed(KEY_ESCAPE) or (key_down(KEY_LALT) and key_pressed(KEY_F4))) {
        exit();
        return true;
    }
    return false;
}

class MenuManager {
    private GameState@ game_state;
    
    MenuManager(GameState@ state) {
        @game_state = state;
    }

    int show_main_menu() {
        menu m;
        m.intro_text = "Welcome to Freight Fate! Use up/down arrows to choose an option and press Enter to select:";
        m.click_sound = "sounds/menu_nav.ogg";
        m.select_sound = "sounds/menu_select.ogg";
        m.add_item("Start New Game - Begin your trucking adventure");
        m.add_item("Load Game - Continue a saved game"); 
        m.add_item("Options - Adjust game settings");
        m.add_item("Quit - Exit the game");
        
        play_ui_sound();
        return m.run();
    }

    string show_game_menu() {
        menu m;
        m.intro_text = "Game Menu - What would you like to do? Use up/down arrows to choose:";
        m.click_sound = "sounds/menu_nav.ogg";
        m.select_sound = "sounds/menu_select.ogg";
        m.add_item("Drive - Start driving your truck", "drive");
        m.add_item("Refuel - Fill up your gas tank", "refuel");
        m.add_item("Rest - Take a break to refresh", "rest"); 
        m.add_item("Check Status - View game statistics", "status");
        m.add_item("Save Game - Save your progress", "save");
        m.add_item("Quit - Return to main menu", "quit");
        
        m.run();
        return m.selected_item_id;
    }

    bool show_options_menu() {
        menu m;
        m.intro_text = "Game Options - Customize your game experience:";
        m.click_sound = "sounds/menu_nav.ogg";
        m.select_sound = "sounds/menu_select.ogg";
        m.add_item("Adjust Volume - Change game volume levels");
        m.add_item("Toggle Sound Effects - Turn game sounds on/off");
        m.add_item("Change Difficulty - Modify game challenge");
        m.add_item("Back - Return to main menu");
        
        while (true) {
            int choice = m.run();
            if(choice == -1) return false;
            
            switch (choice) {
                case 0: adjust_volume(); break;
                case 1: toggle_sound_effects(); break;
                case 2: change_difficulty(); break;
                case 3: return true;
            }
            return false;
        }
    }

    int show_game_over_menu(bool won) {
        menu m;
        m.intro_text = won ? 
            "Congratulations! You've successfully completed your deliveries and won the game!" :
            "Game Over. Your trucking journey has come to an end. Better luck next time!";
        m.click_sound = "sounds/menu_nav.ogg";
        m.select_sound = "sounds/menu_select.ogg";
        m.add_item("Play Again - Start a new game");
        m.add_item("Main Menu - Return to title screen");
        m.add_item("Quit - Exit the game");
        
        play_ui_sound();
        return m.run();
    }

    double show_refuel_menu() {
        menu refuel_menu;
        refuel_menu.intro_text = "Current money: $" + int(game_state.money) + 
                            "\nFuel price: $" + fuel_prices[game_state.current_location] + " per gallon";
        
        // Calculate max affordable gallons
        double max_affordable = game_state.money / fuel_prices[game_state.current_location];
        double tank_space = 100 - game_state.fuel;
        double max_possible = minimum(max_affordable, tank_space);

        refuel_menu.add_item("10 gallons - $" + int(10 * fuel_prices[game_state.current_location]));
        refuel_menu.add_item("20 gallons - $" + int(20 * fuel_prices[game_state.current_location]));
        refuel_menu.add_item("30 gallons - $" + int(30 * fuel_prices[game_state.current_location]));
        refuel_menu.add_item("Fill tank (" + int(tank_space) + " gallons) - $" + int(tank_space * fuel_prices[game_state.current_location]));
        refuel_menu.add_item("Cancel");

        play_ui_sound();
        int choice = refuel_menu.run();
        
        switch(choice) {
            case 0: return minimum(10, max_possible);
            case 1: return minimum(20, max_possible);
            case 2: return minimum(30, max_possible);
            case 3: return tank_space;
            case 4: return 0; // Cancel
            default: return 0;
        }
    }
}

MenuManager@ menu_manager;

void main() {
    try {
        show_window("Freight Fate");
        initialize_game();
        initialize_audio();
        
        @menu_manager = MenuManager(@game_state);
        play_menu_music();
        
        while (true) {
            int main_choice = menu_manager.show_main_menu();
            if (main_choice == -1 or check_exit_keys()) {
                cleanup_resources();
                break;
            }
            
            switch (main_choice) {
                case 0: start_new_game(); break;
                case 1: load_game(); break;
                case 2: menu_manager.show_options_menu(); break;
                case 3: cleanup_resources(); exit(); break;
            }
        }
    }
    catch(const string& e) {
        speak("Fatal error: " + e, false);
        cleanup_resources();
        exit();
    }
}

void cleanup_resources() {
    stop_menu_music();
    stop_engine_sound();
    game_sounds.destroy_all();
    sound_pack.close();
}

void initialize_game() {
    locations = {"New York", "Chicago", "Denver", "Las Vegas", "Los Angeles"};
    destinations = {0, 800, 1400, 2200, 2800};
    fuel_prices = {3.5, 3.2, 3.7, 3.9, 4.1};
}

void start_new_game() {
    // Reset game state
    game_state.reset();

    pick_up_cargo();
    wait(3000); // Increased wait time after initial cargo pickup

    while (!game_state.game_over) {
        if (check_exit_keys()) return;

        string action = menu_manager.show_game_menu();
        if (action == "drive") drive();
        else if (action == "refuel") refuel();
        else if (action == "rest") rest();
        else if (action == "status") check_status();
        else if (action == "save") save_game();
        else if (action == "quit") {
            if (confirm_quit()) {
                game_state.game_over = true;
            }
        }

        if (game_state.game_won) {
            game_state.player_won = true;
            game_state.game_over = true;
        }
    }

    int end_choice = menu_manager.show_game_over_menu(game_state.player_won);
    if (end_choice == 0) start_new_game();
    else if (end_choice == 1) return; // Back to main menu
    else exit();
}

void load_game() {
    speak("Game loading is not implemented yet.", false);
} // Closing brace added here

void save_game() {
    speak("Game saving is not implemented yet.", false);
} // Closing brace added here

void check_status() {
    menu status_menu;
    status_menu.intro_text = "Current Status";
    
    // Add all status information as separate menu items for easy reading
    status_menu.add_item("Location: " + locations[game_state.current_location]);
    status_menu.add_item("Distance traveled: " + int(game_state.distance) + " miles");
    status_menu.add_item("Fuel remaining: " + int(game_state.fuel) + " gallons");
    status_menu.add_item("Money: $" + int(game_state.money));
    status_menu.add_item("Fuel price here: $" + fuel_prices[game_state.current_location] + " per gallon");
    
    if (game_state.current_location < locations.length() - 1) {
        status_menu.add_item("Next destination: " + locations[game_state.current_location + 1] + " (" + (destinations[game_state.current_destination] - game_state.distance) + " miles away)");
    } else {
        status_menu.add_item("You've reached the final destination!");
    }

    if(game_state.current_cargo != "") {
        status_menu.add_item("Cargo: " + game_state.current_cargo + " (worth $" + game_state.cargo_value + ")");
    }
    
    status_menu.add_item("Return to game");
    
    // Run the menu until user selects "Return to game" or presses escape
    status_menu.run();
}

void adjust_volume() {
    speak("Volume adjustment is not implemented yet.");
}

void toggle_sound_effects() {
    speak("Sound effects toggle is not implemented yet.");
}

void change_difficulty() {
    speak("Difficulty change is not implemented yet.");
}

bool confirm_quit() {
    menu m;
    m.intro_text = "Are you sure you want to quit?";
    m.add_item("Yes");
    m.add_item("No");
    int choice = m.run();
    return choice == 0;
}

void pick_up_cargo() {
    array<string> cargo_types = {"Electronics", "Furniture", "Food", "Clothing", "Construction Materials"};
    int cargo_index = random(0, cargo_types.length() - 1);
    game_state.current_cargo = cargo_types[cargo_index];
    game_state.cargo_value = random(500, 2000);
    speak("You've picked up a shipment of " + game_state.current_cargo + " worth $" + game_state.cargo_value + ".", false);
}

void check_destination() {
    if(game_state.distance >= destinations[game_state.current_destination]) {
        game_state.current_destination++;
        game_state.current_location++;
        if(game_state.current_destination >= destinations.length()) {
            game_state.game_won = true;
            speak("Congratulations! You've reached all destinations and won the game!", false);
        } else {
            speak("You've reached " + locations[game_state.current_location] + ". Next destination is " + locations[game_state.current_location + 1] + " in " + (destinations[game_state.current_destination] - game_state.distance) + " miles.", false);
            deliver_cargo();
        }
    }
}

void deliver_cargo() {
    if(game_state.current_cargo != "") {
        game_state.money += game_state.cargo_value;
        speak("You've delivered " + game_state.current_cargo + " and earned $" + game_state.cargo_value + ".", false);
        game_state.current_cargo = "";
        game_state.cargo_value = 0;
    }
    pick_up_cargo();
}

void refuel() {
    double amount = menu_manager.show_refuel_menu();
    if(amount <= 0) return;
    
    double cost = amount * fuel_prices[game_state.current_location];
    game_state.fuel += amount;
    game_state.money -= cost;
    
    speak("Refueled " + int(amount) + " gallons for $" + int(cost), false);
    play_ui_sound();
}

void rest() {
    speak("Resting. You take a short rest to refresh yourself.");
    wait(3000);
    speak("Rested. You feel refreshed and ready to continue your journey.");
}

void drive() {
    speak("Press up arrow to start driving. Use down arrow to brake, and escape to stop.", false);
    
    // Constants for driving mechanics
    const double MPH_MULTIPLIER = 60.0; // Convert speed units to MPH for display
    const double MAX_SPEED_MPH = 70.0;  // Maximum speed in MPH
    const double ACCELERATION_MPH = 5.0; // MPH gained per second when accelerating
    const double BRAKE_POWER_MPH = 10.0; // MPH lost per second when braking
    const double COAST_DECEL_MPH = 2.0;  // MPH lost per second when coasting
    const double FUEL_PER_MILE = 0.05;   // Gallons used per mile (20 MPG)
    
    // Initialize driving state
    double speed_mph = 0;
    double miles_traveled = 0;
    int update_counter = 0;
    bool is_driving = false;
    
    // Wait for initial acceleration with clear prompt
    speak("Press up arrow to begin driving", false);
    while(!is_driving) {
        if(key_pressed(KEY_ESCAPE)) {
            speak("Cancelled driving", false);
            return;
        }
        if(key_pressed(KEY_UP)) {
            is_driving = true;
            speak("Starting engine!", false);
        }
        wait(50);
    }
    
    speak("Starting to drive!", false);
    //stop_menu_music();
    
    while(is_driving) {
        if(key_pressed(KEY_ESCAPE)) {
            is_driving = false;
            break;
        }
        
        // Calculate time elapsed for this frame (50ms = 0.05 seconds)
        double time_elapsed = 0.05;
        
        // Handle acceleration/deceleration
        if(key_down(KEY_UP) && game_state.fuel > 0) {
            speed_mph = minimum(speed_mph + (ACCELERATION_MPH * time_elapsed), MAX_SPEED_MPH);
        } else if(key_down(KEY_DOWN)) {
            speed_mph = maximum(speed_mph - (BRAKE_POWER_MPH * time_elapsed), 0);
        } else {
            speed_mph = maximum(speed_mph - (COAST_DECEL_MPH * time_elapsed), 0);
        }
        
        // Calculate distance traveled this frame
        double miles_this_frame = (speed_mph * time_elapsed) / 3600.0; // Convert MPH to miles per frame
        miles_traveled += miles_this_frame;
        game_state.distance += miles_this_frame;
        
        // Calculate fuel consumption
        if(speed_mph > 0) {
            double fuel_used = miles_this_frame * FUEL_PER_MILE;
            game_state.fuel = maximum(0, game_state.fuel - fuel_used);
        }
        
        // Update status and sounds every second (20 frames)
        update_counter++;
        if(update_counter >= 20) {
            speak("Speed: " + int(speed_mph) + " mph", true);
            //play_engine_sound(speed_mph);
            update_counter = 0;
            
            // Full status update every 5 seconds
            if(update_counter % 100 == 0) {
                speak("Fuel: " + int(game_state.fuel) + " gallons", true);
                
                if(game_state.fuel <= 0) {
                    speak("Out of Fuel! You've run out of fuel and need to get a tow!", false);
                    game_state.money -= 200; // Tow truck fee
                    is_driving = false;
                    break;
                }
                
                random_event();
                check_destination();
                
                if(game_state.game_won) {
                    is_driving = false;
                    break;
                }
            }
        }
        
        wait(50);
    }
    
    //stop_engine_sound();
    //play_menu_music();
    speak("Stopped driving. Traveled " + int(miles_traveled) + " miles this trip.");
}

void random_event() {
    if(random(1, 100) <= 10) { // Increased chance of random events to 10%
        //play_event_sound();
        int event_choice = random(1, 10); // Expanded range for more events
        switch(event_choice) {
            case 1:
                good_weather();
                break;
            case 2:
                bad_weather();
                break;
            case 3:
                road_construction();
                break;
            case 4:
                find_money();
                break;
            case 5:
                free_meal();
                break;
            case 6:
                speak("Lucky! You find a shortcut and save some fuel!");
                game_state.fuel += 5;
                break;
            case 7:
                speak("Traffic. You hit traffic and waste some fuel.");
                game_state.fuel -= 5;
                break;
            case 8:
                speak("Hitchhiker. You pick up a hitchhiker who gives you some money for gas.");
                game_state.money += 20;
                break;
            case 9:
                speak("Flat Tire. You get a flat tire and have to spend money to fix it.");
                game_state.money -= 50;
                break;
            case 10:
                speak("Police Check. You get stopped by the police and have to pay a fine.");
                game_state.money -= 100;
                break;
        }
    }
}

void good_weather() {
    speak("Clear skies ahead! The good weather improves your fuel efficiency.");
    game_state.fuel += 3;
}

void bad_weather() {
    speak("Heavy rain ahead. The bad weather reduces your fuel efficiency.");
    game_state.fuel -= 3;
}

void road_construction() {
    speak("Road construction ahead. You'll need to slow down and take a detour.");
    game_state.distance -= 10;
    game_state.fuel -= 2;
}

void find_money() {
    int found_amount = random(10, 50);
    speak("Lucky day! You found $" + found_amount + " on the road.");
    game_state.money += found_amount;
}

void free_meal() {
    speak("A kind stranger offers you a free meal at a truck stop. You save some money and feel refreshed.");
    game_state.money += 15;
    game_state.fuel += 2; // Assuming the rest during the meal slightly improves efficiency
}
