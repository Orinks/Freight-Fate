// Game constants
const double STARTING_FUEL = 100;
const double STARTING_MONEY = 1000; 
const double MAX_FUEL = 100;

/**
 * Game state management class
 * Handles core game state and settings
 */
class GameState {
    // Game progress
    double distance = 0;
    double fuel = 100;
    double money = 1000;
    bool driving = false;
    uint current_destination = 0;
    uint current_location = 0;
    string current_cargo = "";
    double cargo_value = 0;
    bool game_over = false;
    bool player_won = false;
    bool game_won = false;
    
    // Sound settings
    double master_volume = 1.0;
    double music_volume = 1.0;
    double effects_volume = 1.0;
    bool sound_enabled = true;
    
    // Game settings
    int difficulty = 1; // 0=Easy, 1=Normal, 2=Hard
    
    
    void reset() {
        distance = 0;
        fuel = STARTING_FUEL;
        money = STARTING_MONEY;
        driving = false;
        current_destination = 0;
        current_location = 0;
        current_cargo = "";
        cargo_value = 0;
        game_over = false;
        player_won = false;
        game_won = false;
    }
    
    double get_fuel_capacity_remaining() {
        return MAX_FUEL - fuel;
    }
    
    double get_max_affordable_fuel(double price_per_gallon) {
        return money / price_per_gallon;
    }
    
    bool can_afford(double cost) {
        return money >= cost;
    }
    
    void apply_cost(double cost) {
        if(can_afford(cost)) {
            money -= cost;
        }
    }
    
    void add_fuel(double amount) {
        fuel = minimum(fuel + amount, MAX_FUEL);
    }
    
    string get_difficulty_name() {
        switch(difficulty) {
            case 0: return "Easy";
            case 1: return "Normal"; 
            case 2: return "Hard";
            default: return "Normal";
        }
    }

    void pick_up_cargo() {
        array<string> cargo_types = {"Electronics", "Furniture", "Food", "Clothing", "Construction Materials"};
        int cargo_index = random(0, cargo_types.length() - 1);
        current_cargo = cargo_types[cargo_index];
        cargo_value = random(500, 2000);
        speak("You've picked up a shipment of " + current_cargo + " worth $" + cargo_value + ".", false);
    }

    void deliver_cargo() {
        if(current_cargo != "") {
            money += cargo_value;
            speak("You've delivered " + current_cargo + " and earned $" + cargo_value + ".", false);
            current_cargo = "";
            cargo_value = 0;
        }
        pick_up_cargo();
    }

    void check_destination() {
        if(distance >= destinations[current_destination]) {
            current_destination++;
            current_location++;
            if(current_destination >= destinations.length()) {
                game_won = true;
                speak("Congratulations! You've reached all destinations and won the game!", false);
            } else {
                speak("You've reached " + locations[current_location] + ". Next destination is " + locations[current_location + 1] + " in " + (destinations[current_destination] - distance) + " miles.", false);
                deliver_cargo();
            }
        }
    }

    // Location data
    array<string> locations;
    array<double> destinations;
    array<double> fuel_prices;

    void initialize_locations(array<string>& in loc, array<double>& in dest, array<double>& in prices) {
        locations = loc;
        destinations = dest;
        fuel_prices = prices;
    }

    double get_current_fuel_price() {
        return fuel_prices[current_location];
    }
}
