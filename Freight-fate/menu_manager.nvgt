class MenuManager {
    private audio_form@ form;
    private GameState@ game_state;
    
    MenuManager(GameState@ state) {
        @game_state = state;
        @form = audio_form();
    }

    int show_main_menu() {
        menu main_menu;
        main_menu.intro_text = "Welcome to Freight Fate";
        main_menu.add_item("New Game");
        main_menu.add_item("Load Game");
        main_menu.add_item("Options");
        main_menu.add_item("Exit");
        
        play_ui_sound();
        return main_menu.run();
    }

    string show_game_menu() {
        menu game_menu;
        game_menu.intro_text = "Location: " + locations[game_state.current_location];
        game_menu.add_item("Drive");
        game_menu.add_item("Refuel");
        game_menu.add_item("Rest");
        game_menu.add_item("Check Status");
        game_menu.add_item("Save Game");
        game_menu.add_item("Quit to Main Menu");

        play_ui_sound();
        int choice = game_menu.run();
        
        switch(choice) {
            case 0: return "drive";
            case 1: return "refuel";
            case 2: return "rest";
            case 3: return "status"; 
            case 4: return "save";
            case 5: return "quit";
            default: return "";
        }
    }

    void show_status_menu() {
        menu status_menu;
        status_menu.intro_text = "Current Status";
        
        status_menu.add_item("Location: " + locations[game_state.current_location]);
        status_menu.add_item("Distance: " + int(game_state.distance) + " miles");
        status_menu.add_item("Fuel: " + int(game_state.fuel) + " gallons");
        status_menu.add_item("Money: $" + int(game_state.money));
        status_menu.add_item("Fuel price: $" + fuel_prices[game_state.current_location]);
        
        if (game_state.current_location < locations.length() - 1) {
            double remaining = destinations[game_state.current_destination] - game_state.distance;
            status_menu.add_item("Next: " + locations[game_state.current_location + 1] + 
                               " (" + int(remaining) + " miles)");
        }

        if(game_state.current_cargo != "") {
            status_menu.add_item("Cargo: " + game_state.current_cargo + 
                               " ($" + int(game_state.cargo_value) + ")");
        }
        
        status_menu.add_item("Return");
        
        play_ui_sound();
        status_menu.run();
    }

    void show_options_menu() {
        menu options_menu;
        options_menu.intro_text = "Options";
        options_menu.add_item("Adjust Volume");
        options_menu.add_item("Toggle Sound Effects");
        options_menu.add_item("Change Difficulty");
        options_menu.add_item("Return");

        play_ui_sound();
        int choice = options_menu.run();
        
        switch(choice) {
            case 0: adjust_volume(); break;
            case 1: toggle_sound_effects(); break;
            case 2: change_difficulty(); break;
        }
    }

    int show_game_over_menu(bool won) {
        menu end_menu;
        end_menu.intro_text = won ? "Congratulations! You've Won!" : "Game Over";
        end_menu.add_item("Play Again");
        end_menu.add_item("Main Menu");
        end_menu.add_item("Exit Game");

        play_ui_sound();
        return end_menu.run();
    }

    bool show_confirm_quit() {
        menu confirm_menu;
        confirm_menu.intro_text = "Are you sure you want to quit?";
        confirm_menu.add_item("Yes");
        confirm_menu.add_item("No");

        play_ui_sound();
        return confirm_menu.run() == 0;
    }

    double show_refuel_menu() {
        menu refuel_menu;
        refuel_menu.intro_text = "Current money: $" + int(game_state.money) + 
                            "\nFuel price: $" + fuel_prices[game_state.current_location] + " per gallon";
        
        // Calculate max affordable gallons
        double max_affordable = game_state.money / fuel_prices[game_state.current_location];
        double tank_space = 100 - game_state.fuel;
        double max_possible = minimum(max_affordable, tank_space);

        refuel_menu.add_item("10 gallons - $" + int(10 * fuel_prices[game_state.current_location]));
        refuel_menu.add_item("20 gallons - $" + int(20 * fuel_prices[game_state.current_location]));
        refuel_menu.add_item("30 gallons - $" + int(30 * fuel_prices[game_state.current_location]));
        refuel_menu.add_item("Fill tank (" + int(tank_space) + " gallons) - $" + int(tank_space * fuel_prices[game_state.current_location]));
        refuel_menu.add_item("Cancel");

        play_ui_sound();
        int choice = refuel_menu.run();
        
        switch(choice) {
            case 0: return minimum(10, max_possible);
            case 1: return minimum(20, max_possible);
            case 2: return minimum(30, max_possible);
            case 3: return tank_space;
            case 4: return 0; // Cancel
            default: return 0;
        }
    }
}
