#include "speech.nvgt"
#include "menu.nvgt"
#include "form.nvgt"
#include "game_state.nvgt"
#include "game_data.nvgt"

class MenuManager {
    private GameState@ game_state;
    
    MenuManager(GameState@ state) {
        @game_state = state;
    }

    int show_main_menu() {
        menu m;
        m.intro_text = "Welcome to Freight Fate! Use up/down arrows to choose an option and press Enter to select:";
        m.click_sound = "sounds/menu_nav.ogg";
        m.select_sound = "sounds/menu_select.ogg";
        m.add_item("Start New Game - Begin your trucking adventure");
        m.add_item("Load Game - Continue a saved game"); 
        m.add_item("Options - Adjust game settings");
        m.add_item("Quit - Exit the game");
        
        play_ui_sound();
        return m.run();
    }

    string show_game_menu() {
        menu m;
        m.intro_text = "Location: " + locations[game_state.current_location] + "\nWhat would you like to do? Use up/down arrows to choose:";
        m.click_sound = "sounds/menu_nav.ogg";
        m.select_sound = "sounds/menu_select.ogg";
        m.add_item("Drive - Start driving your truck", "drive");
        m.add_item("Refuel - Fill up your gas tank", "refuel");
        m.add_item("Rest - Take a break to refresh", "rest"); 
        m.add_item("Check Status - View game statistics", "status");
        m.add_item("Save Game - Save your progress", "save");
        m.add_item("Quit - Return to main menu", "quit");
        
        m.run();
        return m.selected_item_id;
    }

    void show_status_menu() {
        menu m;
        m.intro_text = "Current Status";
        m.click_sound = "sounds/menu_nav.ogg";
        m.select_sound = "sounds/menu_select.ogg";
        
        m.add_item("Location: " + locations[game_state.current_location]);
        m.add_item("Distance: " + int(game_state.distance) + " miles");
        m.add_item("Fuel: " + int(game_state.fuel) + " gallons");
        m.add_item("Money: $" + int(game_state.money));
        m.add_item("Fuel price: $" + fuel_prices[game_state.current_location]);
        
        if (game_state.current_location < locations.length() - 1) {
            double remaining = destinations[game_state.current_destination] - game_state.distance;
            m.add_item("Next: " + locations[game_state.current_location + 1] + 
                      " (" + int(remaining) + " miles)");
        }

        if(game_state.current_cargo != "") {
            m.add_item("Cargo: " + game_state.current_cargo + 
                      " ($" + int(game_state.cargo_value) + ")");
        }
        
        m.add_item("Return");
        play_ui_sound();
        m.run();
    }

    /**
     * Shows the options menu and handles option selections
     * Returns: true if user selected Back, false if escaped
     */
    bool show_options_menu() {
        menu m;
        m.intro_text = "Game Options - Customize your game experience:";
        m.click_sound = "sounds/menu_nav.ogg";
        m.select_sound = "sounds/menu_select.ogg";
        
        // Volume controls
        m.add_item("Master Volume: " + int(game_state.master_volume * 100) + "%");
        m.add_item("Music Volume: " + int(game_state.music_volume * 100) + "%");
        m.add_item("Effects Volume: " + int(game_state.effects_volume * 100) + "%");
        
        // Other options  
        m.add_item("Toggle Sound Effects: " + (game_state.sound_enabled ? "On" : "Off"));
        m.add_item("Difficulty: " + get_difficulty_name());
        m.add_item("Back - Return to main menu");

        while (true) {
            int choice = m.run();
            if(choice == -1) return false;
            
            switch (choice) {
                case 0: adjust_master_volume(); break;
                case 1: adjust_music_volume(); break; 
                case 2: adjust_effects_volume(); break;
                case 3: toggle_sound_effects(); break;
                case 4: change_difficulty(); break;
                case 5: return true;
            }
            
            // Refresh menu text after changes
            m.reset();
            m.add_item("Master Volume: " + int(game_state.master_volume * 100) + "%");
            m.add_item("Music Volume: " + int(game_state.music_volume * 100) + "%");
            m.add_item("Effects Volume: " + int(game_state.effects_volume * 100) + "%");
            m.add_item("Toggle Sound Effects: " + (game_state.sound_enabled ? "On" : "Off"));
            m.add_item("Difficulty: " + get_difficulty_name());
            m.add_item("Back - Return to main menu");
        }
        return false;
    }

    private string get_difficulty_name() {
        switch(game_state.difficulty) {
            case 0: return "Easy";
            case 1: return "Normal";
            case 2: return "Hard";
            default: return "Normal";
        }
    }

    private void adjust_master_volume() {
        menu m;
        m.intro_text = "Adjust Master Volume";
        m.add_item("25%");
        m.add_item("50%");
        m.add_item("75%");
        m.add_item("100%");
        
        int choice = m.run();
        if(choice >= 0) {
            game_state.master_volume = (choice + 1) * 0.25;
            apply_volume_settings();
        }
    }

    private void adjust_music_volume() {
        menu m;
        m.intro_text = "Adjust Music Volume";
        m.add_item("25%");
        m.add_item("50%");
        m.add_item("75%");
        m.add_item("100%");
        
        int choice = m.run();
        if(choice >= 0) {
            game_state.music_volume = (choice + 1) * 0.25;
            apply_volume_settings();
        }
    }

    private void adjust_effects_volume() {
        menu m;
        m.intro_text = "Adjust Effects Volume";
        m.add_item("25%");
        m.add_item("50%");
        m.add_item("75%");
        m.add_item("100%");
        
        int choice = m.run();
        if(choice >= 0) {
            game_state.effects_volume = (choice + 1) * 0.25;
            apply_volume_settings();
        }
    }

    private void apply_volume_settings() {
        // Apply volume changes to sound objects
        if(menu_music_handle >= 0) {
            game_sounds.update_sound_start_values(menu_music_handle, 0, 
                -0.5 * (1 - game_state.master_volume * game_state.music_volume), 100);
        }
        if(engine_idle_handle >= 0) {
            game_sounds.update_sound_start_values(engine_idle_handle, 0,
                -0.7 * (1 - game_state.master_volume * game_state.effects_volume), 100);
        }
        if(ui_click_handle >= 0) {
            game_sounds.update_sound_start_values(ui_click_handle, 0,
                -0.3 * (1 - game_state.master_volume * game_state.effects_volume), 100);
        }
        if(event_handle >= 0) {
            game_sounds.update_sound_start_values(event_handle, 0,
                -0.4 * (1 - game_state.master_volume * game_state.effects_volume), 100);
        }
    }

    int show_game_over_menu(bool won) {
        menu m;
        m.intro_text = won ? 
            "Congratulations! You've successfully completed your deliveries and won the game!" :
            "Game Over. Your trucking journey has come to an end. Better luck next time!";
        m.click_sound = "sounds/menu_nav.ogg";
        m.select_sound = "sounds/menu_select.ogg";
        m.add_item("Play Again - Start a new game");
        m.add_item("Main Menu - Return to title screen");
        m.add_item("Quit - Exit the game");
        
        play_ui_sound();
        return m.run();
    }

    bool show_confirm_quit() {
        menu m;
        m.intro_text = "Are you sure you want to quit?";
        m.click_sound = "sounds/menu_nav.ogg";
        m.select_sound = "sounds/menu_select.ogg";
        m.add_item("Yes - Exit to main menu");
        m.add_item("No - Return to game");

        play_ui_sound();
        return m.run() == 0;
    }

    double show_refuel_menu() {
        menu m;
        m.intro_text = "Current money: $" + int(game_state.money) + 
                      "\nFuel price: $" + fuel_prices[game_state.current_location] + " per gallon";
        m.click_sound = "sounds/menu_nav.ogg";
        m.select_sound = "sounds/menu_select.ogg";
        
        // Calculate max affordable gallons
        double max_affordable = game_state.money / fuel_prices[game_state.current_location];
        double tank_space = 100 - game_state.fuel;
        double max_possible = minimum(max_affordable, tank_space);

        m.add_item("10 gallons - $" + int(10 * fuel_prices[game_state.current_location]));
        m.add_item("20 gallons - $" + int(20 * fuel_prices[game_state.current_location]));
        m.add_item("30 gallons - $" + int(30 * fuel_prices[game_state.current_location]));
        m.add_item("Fill tank (" + int(tank_space) + " gallons) - $" + int(tank_space * fuel_prices[game_state.current_location]));
        m.add_item("Cancel");

        play_ui_sound();
        int choice = m.run();
        
        switch(choice) {
            case 0: return minimum(10, max_possible);
            case 1: return minimum(20, max_possible);
            case 2: return minimum(30, max_possible);
            case 3: return tank_space;
            case 4: return 0; // Cancel
            default: return 0;
        }
    }
}
